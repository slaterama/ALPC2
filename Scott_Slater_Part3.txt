1. Tell us about something that you recently learned (or are currently learning). How do you approach learning a new skill?

I am currently getting my PHP skills up to par by learning the Laravel framework (http://www.laravel.com). My preferred way to learn a new skill is to go through a few very simple "Getting Started" tutorials, but then move on to a simple task of my own choosing and try to implement it. This is, of course, often augmented by frequent trips to Google and/or stackoverflow.com. If the new technology incorporates an open-source component, I examine the source code to familiarize myself with best practices and established ways of doing things.

2. Describe the differences between projects you've been involved with (or seen) that have succeeded, and those that have not been successful.

One thing I have seen often is a reliance on speed as the sole indicator of success in releasing a product or feature. I can't help but compare this to driving as fast as possible in order to get to a destination. If you crash your car on the way, you're going to arrive much later than if you had observed some basic safety. Writing code is no different; in this case the "basic safety" involves such practices as writing test cases, looking for opportunities to break functionality into reusable modules for future use (and ensuring that you are not re-coding some functionality that already exists), etc. In short, "moving fast" is a fantastic trait to have as a developer. However, it is not the only one. 

As an example, a very visible (and very successful) company I worked at recently values moving fast well above everything else. However, I often encounter bugs while using their product(s). Additionally, while working there, I would often find enormous swaths of duplicated code that could have been avoided, leading to expensive application bloat.

3. The languages, tools, and technologies that we use as developers are always changing. What specific languages/framweorks/platforms should developers be learning now to be ready for the next few years?

Certinaly Apple's Swift. I also believe that PHP is experiencing a resurgence after decreasing in popularity in recent years. I think this is in no small part to wonderful frameworks such a Laravel, CakePHP, Zend, etc. Google's Andromeda will be something to look at as well, in addition to relatively recent platforms targeting Smart TVs and automobiles. I keep expecting Microsoft to (finally) bust out with something competitive in the realm of mobile/desktop, but it seems they are still getting their act together. (They've finally produced some beautiful hardware and I can't help but think that they'll figure out this mobile/desktop fusion space soon.)

4. Discuss the most effective team you've been a part of. What made it so? What was your role on the team?

I believe this was the team I worked with at Citymaps. Citymaps has recently been aquired by TripAdvisor, but at the time, Citymaps was a startup of fifteen or so people. My role there was the Director of Android Development, and for about 60% of the time I was managing ... myself. We had one iOS developer one Android developer and one web developer, but we also had 3-4 other developers who could jump from project to project. This allowed Citymaps to be very agile when it came to focusing on one of the platforms over others for short periods of time. We had meetings only when we felt they were beneficial (rather than always-longer-than-anticipated daily standups), but relied on code reviews and the sharing of logic between the different development platforms. 

5. What specific approaches or techniques do you use in your code to make sure that it's bug-free and performant?

I have a few approaches to this. First of all I believe that no one class and/or file in an application should be any longer than a few hundred lines, with as few exceptions as possible. This keeps code much more maintainable and readable. I believe in adhering to coding standards which doesn't contribute directly to code being bug-free and performant, but I find that bug-free and performant code is often a fortunate by-product of adhering to established coding standards. I think that any block of code in a method that exceeds a few dozen lines should be viewed as a candidate for being broken out into its own method. I think code should be well-documented, using JavaDoc / PHPDoc / etc., as this will help future developers and discourage duplicated code and effort. Finally, test cases should be written to test these modular methods and classes. A good test class can save hours of heartache down the road. 